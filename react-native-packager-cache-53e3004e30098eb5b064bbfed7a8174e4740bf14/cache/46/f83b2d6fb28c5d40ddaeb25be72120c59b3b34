Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _types = require('../actions/types');

var INITIAL_STATE = {
    users: {
        email: '',
        password: '',
        names: '',
        direccion: '',
        error: '',
        loading: false,
        user: null,
        phone: ''
    }
};

exports.default = regis = function regis() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE.users;
    var action = arguments[1];


    switch (action.type) {

        case _types.NAME_CHANGEDREG:
            return _extends({}, state, {
                names: action.payload
            });

        case _types.PHONE_CHANGEDRED:
            return _extends({}, state, {
                phone: action.payload
            });

        case _types.EMAIL_CHANGEDREG:
            return _extends({}, state, {
                email: action.payload
            });

        case _types.INFO_USER:
            {
                return INITIAL_STATE;
            };

        case _types.PASSWORD_CHANGEDREG:
            return _extends({}, state, {
                password: action.payload
            });

        case _types.DIRECCION_CHANGEDREG:
            return _extends({}, state, {
                direccion: action.payload
            });

        case _types.LOGIN_USERREG:
            return _extends({}, state, {
                loading: true,
                error: ''
            });

        case _types.LOGIN_USER_SUCCESSREG:
            return _extends({}, state, INITIAL_STATE, {
                user: action.payload
            });

        case _types.LOGIN_USER_FAILREG:
            return _extends({}, state, {
                error: 'Autenticaci√≥n Fallida.',
                password: '',
                loading: false
            });

        default:
            return state;

    }
};